//---------------------------------------------------------------------------
#include    <stdlib.h>
#include    <iostream>
using namespace std;
#include  <conio.h>
#include  "Pointer.h"
#include  "Pointer2.h"
int main(int argc, char* argv[])
{
//	f3();
//
//// " Это переменные. Как переменные видны в отладчике.
//int a = 10;
//float b = .15;
//char c = '1';
////	Это адреса переменных. Как видны адреса.
//int *pa;
//pa = &a;
//float *pb;
//pb = &b;
//char *cc;
//cc = &c;
//
//// Операции над указателями.
//int   x = 3;       //
//int   *px;         // &x получит адрес переменной х.
//px = &x;           //Адрес можно присвоить указателю
////int   k;
////k = *px;
//
//int   *pk;         //Косвенная адресация.
//pk = px;

//k = 3;
//pk = &k;           //Получен адрес переменной k

//// Пример недопустимого использования void
//int    k_ = 3;
//float  y_ =2.5;
//void   *p_k_;    //Указатель на void
//void   *p_y_;    //Указатель на void
//p_k_ = &k_;
//p_y_ = &y_;
///* Размещение в памяти переменных и указателей.*/
//f1();
///*Пример на выделение памяти и смещение указателя.*/
//f3();
////---------------------------------------------------------------------------
//
////---------------------------------------------------------------------------
//1. Косвенная адресация в массивах
#define N 100
	int Arr[] = { 1,2,3,4,5,6 };
	int sum;
	int i;
	int n = sizeof(Arr) / sizeof(int);
	//Обращение к элементам массива через операцию []
	for (i = 0, sum = 0; i<n; i++)
		sum += Arr[i];
	printf("\nSum=%d", sum);
	// Обращение к элементам массива через операцию * и смещение
	int * pt;
	for (pt = Arr, sum = 0; pt < Arr + n; pt++)
		sum += *pt;
	cout << "\nSum= " << sum << endl;
	//Или еще так:
	for (pt = Arr, i = 0, sum = 0; i<n; i++)
		sum += *(Arr + i);
	cout << "\nSum= " << sum << endl;
	//Номера и адреса элементов этого массива.
	//Спецификатор формата - р.
	int nmr;
	for (pt = Arr, nmr = 0; pt < Arr + n; pt++)
		cout << "\nNomer= " << nmr++ << "  Address= " << pt << endl;;
	
	// Динамический массив
	int *A;
	A = new int[5];
	for (int i = 0; i<5; i++)
		A[i] = i + 1;
	for (int *ip = A; ip<A + 5; ip++)
		printf("%d ", *ip);
	delete[] A;
//
//	//Dymamic_memory_old();
//	//Dymamic_memory_new();
//	// Функции и массивы
//	int a1[N] ,a2[N];
//	   int n1, n2;
//		 input_Arr(a1, n1);
//		 transform_Arr(a1, n1);
//		 print_Arr(a1, n1);
//	
//		 input_Arr(a2, n2);
//		 transform_Arr(a2, n2);
//		 print_Arr(a2, n2);
//
//	// Функция, возвращающая массив. 
//	int *New_a;
//	New_a = new_Arr(5);
//
//	print_Arr(New_a, 5);
//	Size( );
//
//	// Функция как параметр функции
//	// Обращение к функциям.
//	Table(-1., 1., 0.2, F1);
//	Table(-1., 1., 0.2, F2);
//
	_getch( );
return 0;
}
//---------------------------------------------------------------------------
