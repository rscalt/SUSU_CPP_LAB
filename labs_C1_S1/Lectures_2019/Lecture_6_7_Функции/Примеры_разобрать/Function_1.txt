/*                    ВВЕДЕНИЕ В МЕХАНИЗМ ФУНКЦИЙ

   1. Что такое функция.
   2. Как написать собственную функцию.
   3. Как обратиться. 
   4. Общие механизмы реализации модульной модели программирования.

   С++ - процедурно-ориентированный язык. Принципы программирования С++ основаны на понятии функции.
   Примеры - функция main, библиотечные функции.

Структура С++ программы, это
1) Совокупность файлов (модулей).
   Модуль: Набор данных и алгоритмов их обработки.
   Механизмы взаимодействия модулей:
     а) #include - вставка текста одного файла в другой,
     б) проект - объединение модулей С++ для совместной компиляции и компоновки.
2) Совокупность блоков (функций). Содержатся в тексте каждого модуля проекта.
   Функции С++ есть функции одного уровня, глобальные (равные права).
   Функция main - главная, с нее начинается выполнение модуля, и она должна быть в единственном числе.
3) Совокупность библиотек функций.
   Библиотечная функция - программа (функция), решающая стандартную задачу.
   Библиотеки - файлы, в которых хранятся описания функций:
     а) скрытый алгоритм          // скомпилированы, в объектном коде.
     б) открытый интерфейс        // объявления в заголовочных файлах.

            ФУНКЦИИ С++. МОДУЛЬНЫЙ СТИЛЬ В ПРОГРАММИРОВАНИИ
Достоинства модульного стиля программирования
   1. Алгоритмы отделены от данных. К данным имеют доступ множество функций их  обработки. Данные (или ссылки на них) предаются в функцию и возвращаются измененными.
   2. Высокая степень абстрагирования проекта. Большая задача разбита на подзадачи, каждая на еще подзадачи и т.д.
   Объем задачи нижнего уровня - 3-4 страницы кода (не более 50-60 строк).
Алгоритм прост и очевиден, легко описывается, легко отлаживается, является универсальным. Затем задача собирается в единое целое.
Роль функций верхнего уровня - управление вызовами функций нижнего уровня.

Самостоятельно: Принципы модульного подхода в программировании.

Определение
Функция - самостоятельный именованный алгоритм решения некоторой законченной задачи.

Все Функции С++ равноправны, описываются на одном уровне.

Функция:
   Имеет имя.
   Имеет тип.
   Может иметь параметры (аргументы).

Назначение функции
   1. Утилитарное (простое сокращение текста программы). В виде функции можно оформить выражение (алгоритм), которое нужно записать несколько раз.
   2. Структурирование текста программы (модульный подход). Функция пишется на всю оставшуюся жизнь. Можно продать, подарить, переносить из одного проекта в другой.
   

Категории функций
1. Библиотечные.
2. Определенные пользователем.




1. Библиотечные функции
   1. Объявления библиотечных функций содержатся в заголовочных файлах с именами <имя.h>, например, <stdio.h>. Чтобы объявление стало доступно программе, необходимо включить в текст программы директиву #include <имя.h>. 
При этом текст заголовочного файла, в котором есть объявление функции, включается в текст программы на этапе препроцессорной обработки. 
В некотором роде, это аналог объявлению переменных.
   2. Описания библиотечных функций содержатся в библиотечных файлах. Они хранятся в компилированном виде (файлы с расширением lib), присоединяются к коду разработчика на этапе сборки.

2. Функции пользователя
   Собственные функции пользователя описываются:
   1) в теле программы, тогда описание функции записывается внутри файла программы (ламерский стиль);
   2) в заголовочных файлах, тогда это личный файл с именем "имя.h", содержит тексты описания функций.
Смысл - файл легко подключается к любой программе, использующей эти функции.
Например,
#include "имя.h"   //Текстовая строка.
Препроцессор ищет необходимый включаемый файл сначала в текущем каталоге, потом в каталоге include.

//=============================================================================
			
                   Создание и использование простой функции
   Функция С++, это конструируемый тип данного (потому что возвращает значение).
       
Описание функции
Структура простой функции - аналог структуре функции main:
Синтаксис:
// Заголовок функции
тип_возвращаемого_значения имя_функции (тип_параметров имена_параметров)
{
   //Тело функции.
   описания локальных переменных;     //Может отсутствовать.
	описание алгоритма;
     return возвращаемое_значение;	//Отсутствует, если функция void
}

Отдельные составляющие могут быть опущены (кроме имени) (простой пример - f0.c)

Замечания об описании
   Заголовок функции - это объявляющая строка, которая содержит наиболее важные
характеристики функции (интерфейс).
   Используется для объявления функции в теле программы, в нем указаны все внешние характеристики функции, а именно:
   1) Тип функции. Это тип возвращаемого значения или void для функций, которые не возвращают значений.
   Типом функции может быть
   а) void,
   б) имя любого базового типа, например
      long int factorial(int n)
   в) указатель для возвращения значения, отличного от базовых типов.
Если тип не указан, то int.
   2) Имя функции. Это, чтобы ее можно было позвать.
   Имя main для главной функции программы, или любое, не совпадающее с ключевыми словами и именами других объектов программы, например.
     int   x;
     float x(float a);
   Не рекомендуется переопределять библиотечные функции.
   sin pow log circle
   Не рекомендуется начинать с _ (зарезервированные имена макроопределений).
   int _max(inta, int b)
   3) Формальные параметры функции. Это перечисленные через запятую имена аргументов функции вместе с их типами.
   float function (int a, int b, float x, double y)
   Формальные параметры, как правило, это входные данные для функции - те, которые функция получает извне. Могут быть и результатом.
    Если параметров нет, то пишется void.
    Если список пуст, то функция имеет переменное число аргументов.
    void main (void)			// Нет
    void main (количество, список)	// Есть
    printf ("%f%f%d",a,b,c);		// Много
    sin(x)					// Один

Замечания о типе функции
   Поскольку функция возвращает значение, она обладает типом. В этом смысле функцию можно рассматривать как данное.
   Для функции значением является то, что она возвращает после выполнения, а это значение выражения, записанного в return.
   1) Если это простой объект, тип функции - какой-нибудь базовый тип.
   2) Если это объект сложного конструируемого типа (массив, структура и пр.), то это указатель (адрес) объекта.
   3) Если функция не возвращает значения, ее тип никакой, то есть void.
   4) Если тип вообще не указан, это не ошибка, тип функции по умолчанию - целый (int).

Например: main - главная функция любой программы
	void main (void)
Это означает, что функция не возвращает значения и не имеет параметров.
	main ()
Это означает, что тип функции int, а число параметров произвольно.
В этом случае в теле main должен быть оператор return, возвращающий значение функции в окружающую среду.
       int main(int argc, char* argv[])
       {
       ?
	return 0;
       }
       
Тело функции содержит:
   1. Описания локальных переменных. Их область действия, это тело функции.
   2. Описание алгоритма. Детали реализации.
   3. Возврат в точку вызова. Используется оператор return (2 формы).
     return;               // Тип void
     return Выражение;     // Тип выражения совпадает с типом функции.

Обращение к функции
   Обращение к функции (вызов) - использование ее для решения задачи.
   Выполняется из любой другой функции программы с использованием механизма вызова функции через операцию обращения: ().

   Обращение может иметь 2 формы (определяются типом):
1. Если функция возвращает значение, то им является значение базового типа или другого (указатель). Это называется оператор-выражение, и оно может быть использовано в выражениях или печати в виде:
   переменная = имя_функции (фактические параметры);  //В выражении присваивания.
   printf("...",имя_функции (фактические параметры)); //В печати.
Пример - обращение к библиотечной функции sin:
	y = sin(x);      // y= pow (sin(x)*5,2.);
	printf("%6.2f",sin(x));
	sin(x);	   // Так тоже можно обратиться к функции,
			   // но что произойдет с вычисленным значением?

2. Если функция не возвращает значения (void), то обращение к ней выглядит как обычный оператор программы в виде:
   имя (фактические параметры);
   Это называется оператор-функция, и оно может быть использовано как оператор.
Пример - обращение к библиотечной функции printf:
   printf ("a=%d \t b=%d\n",a,b);

Множество примеров описания и обращения (f1, f3, f6, fun1, fun2, fun3, fun5).
		

   Механизм обращения к функции и передачи данных
   При обращении к функции происходят следующие события:
   1. Управление передается в функцию (по оператору обращения).
   2. Выделяется память для параметров функции, вычисляются значения формальных параметров и копируются в локальную память.
(Так передаются внешние данные, необходимые для работы функции).
   3. Создаются локальные переменные функции. Живут только в теле функции.
   4. Выполняется алгоритм функции. Использует внешние и локальные данные.
   5. По return управление передается в точку вызова.
В вызывающую программу передаются новые данные (возвращаемое значение).
   6. Локальные переменные умирают, память высвобождается.

   Процессы, происходящие при вызове функции, хорошо видны в отладчике.
Механизм вызовов и передачи параметров - стек вызовов функций (в ОП, хранит вызовы вместе с параметрами).
   Пример в отладчике.


??

??

??

??




Cтр. 4 из 4

