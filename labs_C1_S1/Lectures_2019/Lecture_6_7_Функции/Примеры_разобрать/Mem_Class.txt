/* 			Время жизни и область действия объектов (имен).
				Локальные и глобальные данные.
					Классы памяти.

1. Структура программы на С++
   Программа на языке С состоит из одного или нескольких модулей. Исходные тексты имеют расширение ".с" или ".cpp".
   Модули включаются в файл проекта. Исходные файлы проекта компилируются и собираются совместно.
   1). Одна из функций должна иметь имя "main". С этой функции начинается выполнение программы.
   2) В одном файле (модуле) может быть одна или несколько функций.
Группировка функций в файлах выполняется на логическом уровне.
   3) Механизм взаимодействия программных единиц друг с другом, это разделение передачи управления и передачи данных.
   4) Принцип сокрытия данных внутри функции (локальные данные неизвестны извне).

   Все функции - внешние, т.е. их определения выполняются на одном уровне.
   Любая функция, кроме "main", вызывается из другой функции.
   Функция обладает типом. Если имя типа для функции опущено, по умолчанию имеет тип int. Тип void для функций, не возвращающих значения.

2. Локальные и глобальные данные (объекты) программы.
Определение: Объект, это сущность, обладающая некоторыми атрибутами (свойствами) и методами для проверки и изменения атрибутов объекта.
   В коде программы объектами являются:
   переменные,
   именованные константы,
   функции,
   в целом, имена данных различных типов.

   Объект присутствует в программе своим именем. Каждый объект должен быть объявлен.
Роль объявления - задать имя объекта и атрибуты (свойства):
Механизм:       1) выделяет память
                2) может быть определено значение

Определения
   Область действия - это область программного кода, в которой объект известен (то есть действует его объявление).

   Время жизни - понятие, связанное с областью действия - это период времени в процессе выполнения программы, когда объект фактически занимает память.

Локальные и глобальные объекты
   Локальные (внутренние) объекты объявлены внутри тела блока, в том числе блока тела функции, например:
    {
    int a;
    ...
    }
   а) Область действия - блок, в котором описан объект (от точки описания до конца блока).
   б) Время жизни локального объекта - только время выполнения блока: выделяется память при входе в блок, при выходе память освобождается.
Пример в отладчике.
   Глобальные (внешние) объекты объявлены вне тела всех функций на внешнем уровне.
   а) Область действия - от точки объявления до конца файла с кодом программы. (Файл, в котором объявлен объект).
   б) Время жизни - время выполнения программы.
Пример в отладчике.
Замечание. Запрещается использовать глобальные данные (кроме функций и констант).
   Параметры функций по механизму действия также разделяются на локальные и глобальные, а именно:
   1) Параметр, передаваемый по значению - локальный (копия данного в блоке - теле функции).
   2) Параметр, передаваемый по ссылке - глобальный - адрес объекта в памяти.

   Вопрос. Что произойдет, если имена локального и глобального данного одинаковы?
Принцип локализации имен (пространство имен, приоритет имен, сокрытие имен).
   На время действия локальной переменной, глобальная переменная с тем же именем временно прекращает свое существование и возобновляет свое значение, как только локальная переменная умерла.
Пример в отладчике.

Выводы. Время жизни и область действия переменных определены их объявлением.

   Механизм взаимодействия программных единиц друг с другом, это разделение передачи управления и передачи данных.
   Принцип сокрытия данных внутри функции.

			3. Классы памяти (auto, static, register).
   Классифицируют переменные по схеме выделения памяти. Приписываются перед объявлением типа переменной, например,
      static int n;
      auto   int i;

По умолчанию - auto.

      register не используется  - в регистрах процессора.
Классы памяти меняют механизм глобализации имен.

1. Для локальных переменных.
auto - память для переменной распределяется при входе в функцию, освобождается при выходе, при повторном входе перераспределяется заново, значения переменных не сохраняются.
static - память распределяется один раз при старте программы, и при этом обнуляется. При повторном входе в функцию значения переменных сохраняются.
Вне функции значения недоступны.
Средство глобализировать объект из тела функции.

2. Для глобальных переменных.
static - переменная действует от описания до конца файла, не действует на другие файлы проекта.
auto - переменная действует в данном файле от описания до конца файла, не действует на другие файлы проекта, в которых она описана.

Примеры 30, 31.

//Пример 30.-------------------------------------------------------------
#include	<stdio.h>
#include	<conio.h>

void f(void);            //Глобальные данные класса auto.

void main(void)
{
int i;
int n=5;		   // main 5 раз обращается к функции f
clrscr();
for (i = 0; i < 5; i++)
   {
     n--;                             //main  изменяет n,  и f изменяет n
     printf("\nMain. Вход %d", n);
     f();
   }
}
 // 1. n - глобальная.
 // 2. n - локальная (auto int n;). Принцип локализации имен.
 // 3. n - статическая (static int n;). Обнуляется. Принцип локализации.

void f(void)
{
    //int n;
    static int n;
    n++;
    printf("\nФункция func. Вход %d", n);
}// func - печатает номер обращения

//Пример 31.---------------------------------------------------------
#include <stdio.h>
#include <conio.h>

void  f(void);
static int n;               //Объявлена глобально, обнуляется.

void main(void)
{
int i;                      //Локальная для main
clrscr();
for (i = 0; i < 5; i++)
   {n++;
    printf("\nmain. Вход %d", n);
    f();
   }
} /* main */

//1. n - глобальная.
//2. n - локальная. Принцип локализации имен.
//3. n - статическая.

void f(void)
{  static int n;
   n++;
   printf("\nФункция func. Вход %d", n);
}    /* func */

				4. Внешние объекты
   Внешние объекты определены вне функций, значит, доступны всем функциям программы - одного программного файла.
   Глобализация объекта для проекта.
   1. Слово extern делает объект доступным для функций другого файла или функций, объявленных выше.
   Во внешнем объявлении прототипов функции  - по умолчанию extern.
   2. Заголовочные файлы. Все глобальные объявления необходимо инклюдировать во все файлы проекта.




