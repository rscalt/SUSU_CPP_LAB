//---------------------------------------------------------------------------
#include "M_Array.h"
// #include "Matrix.h"
//---------------------------------------------------------------------------
void main(void)
{
// Размер матрицы описан в хедере: const int N = 4; const int M = 5;
int i,j;
// Переменные, определяющие настоящий размер матрицы:
	 int n=3, m=3;
	 int matr[N][M] = { 
		 {1,2,3},
	     {4,3,5},
	     {11,22,99}
	 }; 
// При вводе матрицы определяется действительное число строк, столбцов.
input_matr("Data.txt",matr,n,m);
// Вывод матрицы.
print_matr(matr,n,m);
// Вывод в файл: создает файл с именем "Data.txt".
print_matr("Data.txt", matr, n, m);

// Матрица как массив массивов: строка матрицы, это одномерный массив.
for (int i=0;i<n;i++)
	Change (matr[i],m);
for (int i=0;i<n;i++)
    print_arr(matr[i],m);

/* Управление в алгоритмах работы с двумерными массивами:
вложенные циклы, где управляющая переменая  -
номер строки во внешнем, и 
столбца во внутреннем цикле для просмотра по строкам.
Или наоборот - просмотр по столбцам.
*/
// Сумма по строкам
int SumR[N];
Sum_Rows(matr,n,m,SumR);
cout << "Сумма по строкам" << endl;
print_arr(SumR, n);
// Сумма по столбцам
int SumC[N];
Sum_Columns(matr,n,m,SumC);
cout << "Сумма по столбцам" << endl;
print_arr(SumC,m);

//Динамический двумерный массив
//int nd, md;
//int ** D_matr;
////Функция выделения памяти для матрицы
////и ввода значений. Разбивает на строки.
//D_matr = get_matr(nd,md);
////Вывод матрицы  - функция. Особенность при передаче параметров.
//print_matr_din(D_matr,nd,md);
system("pause");
}
