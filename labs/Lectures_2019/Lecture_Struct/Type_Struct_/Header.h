/*
   Структура объединяет некую информацию о некотором объекте 
(человеке):
   имя, фамилия, и какие-то данные числового характера, 
например, возраст, рост, средняя зарплата и т.д.
   Имеются сведения о некоторой группе объектов, то есть о 
некотором сообществе людей.
   Объект называется среднестатистическим, если на нем 
достигается минимум модуля разности среднего арифметического 
значений его данных со средним арифметическим всей группы 
объектов.
   Аналогично определяется уникальный объект 
(на нем достигается максимум).
   Объект может быть называн среднестатистическим по k-тому 
параметру, (уникальным по k-му параметру), тогда 
рассматриваются данные о значении k-го показателя этого 
объекта в сравнении со средним значенем k-го показателя 
по всей совокупности объектов.
   Выясним, кто в группе объектов является:
   а) среднестатистическим,
   б) среднестатистическим по отдельным показателям.
   
   Для описания одного объекта используется структура. 
   
   Попытаемся отразить в примере возможности этого типа 
данных. В качестве полей структуры используем простые типы 
данных, массив  и строки, 
причем одна строка будет 
статической, 
а вторая динамической.

   Для хранения имени используем статическую строку, 
для хранения фамилии динамическую, для хранения данных 
массив (ограничимся пятью показателями).

   Информация о среднем арифметическом показателей каждого 
объекта может быть вычислена при получении объектом данных, 
ее можно сохранить, для этого введем в структуру поля 
"Сумма показателей" и "Среднее арифметическое
показателей", данные целого и вещественного типов.
   
   Поскольку в группе объектов несколько данных, следует 
объединить их в массив, где один элемент массива описывает 
один объект.

   Выполним функциональную декомпозицию задачи, то есть 
определим, какие алгоритмы обработки понадобятся для ее 
решения.

   Сначала подумаем, откуда взять данные. Например, их 
можно ввести. 
   1. Для работы c одним объектом пригодятся 
функции ввода данных об одном объекте и вывода данных об 
одном объекте.
   (Получают объект "структура").
   2. Чтобы иметь возможность визуально сравнить данные, 
требуется вывод общей информации, наверное, в виде таблицы.
   (Получает массив структур, его длина).
   
   3. Для поиска среднего арифметического по группе объектов 
и для поиска среднего по какому-то показателю напишем функции,
которые возвращают значение среднего по всей группе объектов 
и по одному показателю. 
   Эти функции похожи внешне и по смыслу, но первая будет 
работать со средним данным всего объекта, а вторая, получив 
в качестве параметра номер показателя, будет работать только 
с этим элементом массива данных.
   
   4. Функция поиска может вернуть номер элемента в массиве 
структур или указатель на объект. Покажем это на примере 
функций поиска. 
   Функция поиска среднестатистического вернет номер в 
массиве структур. Имея функцию вывода, мы легко выведем его 
данные на экран с использованием операции разименования [].
   Функция поиска среднего по k-тому показателю вернет 
указатель на структуру. Имея функцию вывода, мы легко выведем
его данные на экран, с использованием операции 
разименования *.
   5. Поиск по фамилии добавим.
   6. И так далее.
*/

#include <stdio.h>
#include <conio.h>
#include <io.h>
#include <math.h>
#include <string.h>

typedef struct
{
  char	Name[10];           // Один из элементов структуры статический массив
  char	*Surname;           // Динамическая строка.
				// Для нее должна быть выделена память при создании объекта.
  int	Data[5];            // Статический массив данных.
  int	Sum;                // Накапливает и сохраняет сумму баллов.
  float	Var;                // Вычисляет и сохраняет средний показатель.
} Person;   		        // Имя типа данного "Person"



// Ввод данных об одном объекте ============================
void In(Person & Man)         // Передается данное типа Person
{
   puts ("Введите имя: ");
   scanf("%s",&Man.Name);
   puts ("Введите фамилию: ");
   Man.Surname = new char[10];  // Обязательно выделить память.
   scanf("%s",Man.Surname);     // & при вводе значения указателя не пишем.
   puts ("Введите данные: ");
   Man.Sum=0;                   // Будет накоплена сумма показателей.
   for (int i=0;i<5;i++)
      {
       scanf ("%4d",&Man.Data[i]);
       Man.Sum+=Man.Data[i];
      }
   Man.Var=(float) Man.Sum /5.;  // Вычислен средний показатель.
}

// Вывод данных об одном объекте=================================
void Out(Person Man)             // Передается данное типа Person
{
   printf("%s ", Man.Name);
   printf("%s ", Man.Surname);
   for (int i=0;i<5;i++)
      printf ("%4d",Man.Data[i]);  // Выводится одной строкой.
   printf("\nСумма баллов: %d  ",Man.Sum);
   printf("Среднее: %6.2f\n",Man.Var);
}

// Вывод данных обо всех объектах в форме таблицы============
void Out_All(Person Man[], int n)  // Передается n данных типа Person
{
   printf ("====================================================\n");
   printf ("ИМЯ \t ФАМИЛИЯ \t  ДАННЫЕ  \t  CУММА  СРЕДНЕЕ\n");
   printf ("====================================================\n");
   for (int k=0;k<n;k++)
   {
   printf("%-10s ", Man[k].Name);
   printf("%-10s ", Man[k].Surname);
   for (int i=0;i<5;i++)
      printf ("%4d",Man[k].Data[i]);
   printf("%4d ",Man[k].Sum);
   printf("%6.2f \n",Man[k].Var);
   }
   printf ("====================================================\n");
}

// Вычисляет средний показатель по всем объектам==================
float Sred(Person Man[], int n)  // Передается n данных типа Person
{
   float Var=0;                 // Var не имеет отношения к полям структур с именем Var.
   for (int i=0;i<n;i++)
      Var+=Man[i].Var;
   return Var/(float) n;	//  Среднее по всем средним.
}
// Вычисляет средний показатель по  k-тому параметру==========
float Sred_k(Person Man[],int n, int k)  // Передается n данных типа Person
{
   float Var_k=0;                // Var_k - средний по одному показателю.
   for (int i=0;i<n;i++)
      Var_k += (float) Man[i].Data[k];   // Складывает один k-тый показатель по всем объектам.
	 return Var_k /(float) n;	//  Среднее по всем средним.
}

// Определяет номер среднестатистического объекта================
int Sred_Stat(Person Man[],int n)  // Передается n данных типа Person
{
   float Var_All = Sred(Man,n);    // Находим средний показатель по всем объектам.
   float Var_min = fabs(Var_All-Man[0].Var);  // Наименьший имеет номер 0.
   int Nom=0;
   for (int i=0;i<n;i++)
      if (fabs(Var_All-Man[i].Var)<Var_min)
	     Nom=i;                 // Запоминаем номер самого среднего.
   return Nom;
}

// Возвращает указатель на найденный объект===================
Person * Sred_Stat_k(Person Man[],int n,int k)  // Передается n данных типа Person
{
   float Var_k = Sred_k(Man,n,k);    // Находим средний показатель по всем объектам.

   float Var_min = fabs(Var_k-Man[0].Data[k]);  // Наименьший имеет номер 0.
   Person * Nom = Man;	// Знает адрес нулевого элемента.
   for (int i=0;i<n;i++)
      if ( fabs(Var_k-Man[i].Data[k])<Var_min)
	     Nom=Man+i;                 // Запоминаем номер самого среднего.
   return Nom;
}

// Поиск по фамилии===================================
Person * Found_Fam(char *Who, Person Man[], int n)
{
   for (int i=0; i<n; i++)
       if (strcmp(Who,Man[i].Surname)==0)       // ==0, значит найдено.
		return Man+i;
   return NULL;				       //Если поиск неудачен.
}
