		Формальные и фактические параметры функции
   Формальные параметры – те данные, что используются в описании функции (внешние 
данные).
   Имена переменных вместе с их типом.
   Это название говорит, что данные описания формальны, абстрактны, то есть не 
участвуют в реальных действиях, не принимают реальных значений, а только описывают 
взаимосвязь данных в теле функции.

   Фактические параметры – те данные, что передаются функции при обращении к ней.
   Это выражения, реальные значения которых известны на момент обращения к 
функции, и с которыми функция отрабатывает очередной вызов.
   Константы, переменные, выражения.
   Формальные и фактические параметры должны соответствовать друг другу по 
количеству, типу, порядку следования (по сигнатуре параметров).
   Правило: в описании функции и в обращении сигнатуры параметров должны 
совпадать.
Пример. Function.cpp (обращение к Avg).

		Описание и объявление функции. Прототип функции
   С точки зрения структуры программы, в С++ все функции описываются на одном 
уровне модуля, и вложений не допускается. Однако же модульная структура. 

   Описание функции предоставляет программисту всю информацию о ней – 
   внешнюю (тип, имя, сигнатура параметров), 
   внутреннюю (тонкости алгоритма).
   Если рассматривать функцию как тип данного, то описание функции конструирует 
данный тип с указанным именем.
   Объявление функции предоставляет только внешнюю (интерфейсную часть), для 
которой важно только умение правильно использовать функцию, то есть обратиться к 
ней.
   Механизм. 
   Описание функции должно быть известно компилятору, который должен обработать 
вызов функции (сопоставить обращение реальному алгоритму).
   Место объявления или описания функции в программе - до первого обращения к ней.

Возможны варианты
   1. Описание функции фактически расположено перед текстом вызывающей программы.
Пример.
   В этом случае описание и объявление - одно и то же. Описание появится перед 
первым вызовом функции.
   2. Описание функции фактически расположено после текста вызывающей программы.
   Поскольку выполнение алгоритма программы линейное, то функция должна быть 
известна до первого обращения к ней. Чтобы это произошло, нужно объявление 
функции.
   Объявление функции (прототип), - это ее заголовок, за которым стоит знак ;.
   Прототип может быть записан в начале программы, если функция глобальна, или в 
теле main, если функция локализована в main, или в теле любой функции, где функция 
известна локально.
Прототип функции, это аналог описания переменных.
Пример. 
f4.c - без прототипа, 	f5.c - с прототипом.
   3. Описание функции вынесено в отдельный файл.
   Такие файлы должны обладать возможностью быть легко подключаемыми к любой 
программе, использующей эти функции.
   В С++ принято создавать заголовочные файлы, в которых программист накапливает 
функции собственной библиотеки. Этот файл будет доступен любой программе, в теле 
которой есть директива #include, включающая текст заголовочного файла в код текста 
использующей его программы.
Пример.
#include "Function.hpp"   // Доступны все объявления функций.






		 Передача параметров в функцию. Изменяемые значения параметров
   Глобально в С++ существуют два способа передачи параметров в функцию:

1. По значению. 
Механизм: создается локальная копия параметра в теле функции (См. описание 
механизма).
Выводы.
1). Значения параметров при обращении к функции не могут быть изменены.
2). Это мощное средство защиты внешних данных от случайного их изменения функцией.
3). Фактические параметры могут быть константами, переменными, выражениями.

2. По ссылке (по адресу).
Синтаксис:
Тип_функции Имя_функции (тип & имя_параметра)      // &-признак адресной операции.
	{
	// Тело функции
	}
Механизм: функция и вызывающая программа работают с адресом объекта в памяти (с 
одной и той же областью данных, выделенной объекту в вызывающей программе).
Выводы.
1). Параметр является единым объектом для функции и для вызывающей программы.
2). Функция может изменить значения переданных ей параметров.
3). Фактический параметр, передаваемый по ссылке, может быть только адресуемым 
данным, это переменная.
Пример. Функция Swap.

Аналоги
  Как в C++         Как в Паскале                   Как в Бейсике
  void              Procedure                       Sub
  тип               Function                        Function

  параметр-значение    Имя_параметра              Имя_параметра
  параметр=ссылка      var Имя_параметра          Имя_параметра as Variant

			Перегруженные функции
   Перегруженные функции, это механизм С++.
Принцип: одно имя может реализовать разные алгоритмы. Значит, можно описать 
несколько функций с одним и тем же именем.
   Они должны отличаться друг от друга 
   а) количеством параметров;
   б) типом параметров.
Использование одного имени в разных целях называется перегрузкой.
Возможна перегрузка:
   1) по числу параметров,
   2) по типу параметров.
   Как видим, перегруженные функции различаются по сигнатуре параметров.
Механизм - механизм обработки вызовов.
   Вызовы функций осуществляются с подстановкой фактических параметров.
Их типы или их количество сообщают компилятору, какой именно функции сопоставить 
данный вызов.

Пример. Функция печати.
Обращения:
    print();   print(20); print(55,'!');

Пример. Функция Swap.
      Swap (float &a, float &b);
      Swap (int &x, int &y);
      Swap (char &a, char &b);

   Ограничения. Для каждого имени существует столько вариантов перегрузки, сколько 
сигнатур существует.

				Параметры по умолчанию


       Рекомендации по разработке функций
   1) Выделение самостоятельного алгоритма, его входных, выходных и локальных 
данных. Определение типов.
   2) Описание функции.
   3) Тестирование функции.
 
 
 
 


3

