

   Функция
1. Утилитарное - сокращение кода.
2. Глобальное - структурирование программного кода.
   
   Модульный стиль программирования.
Модульность:
1) в проектах IDE
   Модуль - совокупность данных и алгоритмов их обработки.
2) в собственных проектах
   Код основной программы
   Библиотеки функций пользователя в заголовочных файлах.


   Модульный стиль
   

                    Задача
Декомпозиция задачи :  
   задачи первого уровня (данные для обработки)

   задачи второго уровня (данные)

   ...

   задачи нижнего нижнего уровня (самостоятельные по значению, 
   совместимые по данным, малые по объему - 40 строк кода).
Легко пишется, чегко отлаживается.

   Абстрактная сущность задачи - инфологическая модель.
   Инстументы для построения модели -
   1) UML - описания предметной области.
   2) CASE системы 
   3) и так далее.
   4) объектные инструменты

   Процесс построения модели - сверху вниз, от более общей задачи к множеству частных.
   
   Кодирование - снизу вверх:
   кодируем, отлаживаем и тестируем задачи нижнего уровня. 
   на каждом уровне осуществляется сборка, отладка и тестирование данного уровня.
   Функции решения задач
   Основное приложение -  управление задачами нижнего уровня.

   Функции - детально.

Необходимо:
Описание функции

Заголовок_функции
{
   Тело функции
}

   Заголовок_функции - то, что необходимо документировать при опубликовании функции.
   Что она делает,
   Какие данные ей передать, 
   Что она вернет,
   Имя функции.
(Все библиотечные функции) 

   Как правило, пишутся библиотеки, компилируются, и предоставляются в объектном виде (dll)

Место функций в проекте.
   Как профессионально - в заголовочных файлах (h).
   1) все глобальные описания.
   2) легко подключаются к любому коду (include)

  По ламерски - можно в коде основной программы


   void F1(void);	// Это прототип используемой функции - ОБЪЯВЛЕНИЕ.


void main(void)
{
	
   F1();	//Обращение к F1
} 

void F1(void)	// ОПИСАНИЕ - заголовок и тело
{
   // что-то делает.
}


1. Описание функции перед main
2. Описание функции после main, то необходим прототип - заголовок.




   Параметры функций
В описании функции параметры - ФОРМАЛЬНЫЕ
В обращениие к функции параметры - ФАКТИЧЕСКИЕ


   Сигнатуры параметров должны совпадать!!!
   Несоответствие типов сигнатур приводит к приведению типов (меньший тип приводится к большему на время выполнения действия)

    void f1(float x)
    {

    }


// Обращение

    f1(2.5);
    f1(3);
    f1('1');   // Код "1"


   Параметры по ссылке
Тип Имя_функции (тип_1 параметр_1, тип_1 параметр_2)
{


}

    int a, float x

   Функция возвращает одно и только одно значение (или не возвращает)
   Более одногго значения функция должна возвоащать через список параметров

   Синтаксически:

   Тип & Параметр     
 
   Инструментально

   Передается не значение параметра, а его АДРЕС - фактическое местоположение в ОП.
   В противном случае всегда создается локальная копия данных в теле функции (по значению).
   
scanf ("%d%d", & a, & b); 
       



Область действия и время жизни переменных
Для любого программного объекта существует область действия - область кода, где объект известен (фактически выделено место в ОП).
// Блок - тело функции, тело цикла, любой фрагмент 
{
 
// Есть описание - только в теле блока.

} 

Время жизни - от момента выделения объекту памяти на стеке данных, 
до момента высвобождения оной.


   ДЛя статической памяти (на этапе компиляции) место в ОП выделяется на стек данных.
   




Принцип локализации объектов
Что происходит когда?
Ситуация.
Программный объект - выделено место в памяти.
Область действия объекта -  область кода, где объект известен.

void main(void)
{
int a=99;	// a глобальный по отношению к функции.
...
f1();		// функция порождает новое а, другое, чем то, что было 		// раньше. 

}
void f1()
{
int a;
for (a=1; a,5; a++)
  {
  ... 
  }
}
Принцип локализации имен:
На время выполнения области кода, в котором действует локальный объект,
глобальный объект с тем же именем временно прекращает свое существование.
И восстанавливается когда заканчивается время жизни локального бъекта.


Классы памяти
auto (по умолчанию)
int a;	
auto int a;

register
register int a; 	// Переменная располагается в регистрах.
                        // Носит рекомендательный характер. 

Ключевое слово static

static int a;
static - область памяти, в которой размещаются статические объекты = 
переменные и функции.

Для static переменной память выделяется однократно при запуске кода, 
по этом обнуляется, время жизни = время выполнения кода.

void main(void)	// выделяется память для k=0;
{
  static int a;


f1();


}

void f1(void)
{
static int k;
  k=// какое-то значение.
  // При последующих входах в функцию значение сохраняется.
}



Поток управления при использовании функции
  Цепочка событий при обращении к функции:

int f(int a, int b)
{
int i,j;
// Алгоритм

return // Выражение
}

//Обращение

int key=f(2,x+5);

  1. Управление передается в функцию.
  2. Выделяется память под параметры-значения, вычисляются значения фактических параметров и копируются в локальную память. 
  3. Создаются локальные объекты функции.
  4. Выполняется алгоритм функции.
  5. По оператору return управление передается в точку вызова, при этом передается возвращаемое значение.
  6. Высвоюождается память, занятая локальными данными, в том числе, параметрами функции.

  В отладчике - по шагам.
  Все события отражаются на стеке вызовов.
