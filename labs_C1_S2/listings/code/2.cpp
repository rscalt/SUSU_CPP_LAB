/* 
    Практическоезадание No2: перегруженные операции. 
    1.Опишите класс «Кольцо» на координатной плоскости.
    Данные класса:координаты центра кольца и радиусы.
    Конструкторы класса:конструктор по умолчанию, конструктор кольца с центром в начале координат, 
    и конструктор произвольного кольца. 
    Определите методы вычисления площади кольца, принадлежности кольцу точки с указанными координатами.
    2.Для ввода и вывода объектов перегрузите операции >> ввода и << вывода в поток. 
    3.Перегрузите операцию сложения колец с использованием метода класса, а операцию вычитания с использованием дружественной функции.
    4.Перегрузите унарную операцию ++ для инкремента кольца как метод класса,a –– как дружественную функцию.
    5.Перегрузите операцию присваивания для колец.
    6.Перегрузите операцию сравнения == для колец: идентичность значений полей
    7.Перегрузите операцию сравнения > для колец: по значению площади.
    8.Проверьте работу всех операций на статических идинамических объектах 
*/

#include <math.h>
#include <iostream>
#include <iomanip>

using namespace std;
////////////////////////////////////////////////////////
class Ring
{
private:
    int m_center_x = 0;
    int m_center_y = 0;
    int m_radius = 0;
    static const float PI = 3.14159265359;

public:
//===//===//===//===//===//===//===//===//===//===
    //конструктор по умолчанию
    Ring();
    //конструктор с центром в начале координат
    Ring(int rad);
    //конструктор произвольного кольца
    Ring(int x_coord, int y_coord, int rad);
    //деструктор
    ~Ring();
//===//===//===//===//===//===//===//===//===//===
    

};

Ring::Ring() : m_center_x(0),
               m_center_y(0),
               m_radius(0)
{
    cout << "Default Ring have been created";
}

Ring::Ring(int rad) : m_center_x(0),
                      m_center_y(0),
                      m_radius(rad)
{
    cout << "Centered Ring have been created";
    cout << "It`s radius is " << rad << "\n";
}

Ring::Ring(int x_coord, int y_coord, int rad) : m_center_x(x_coord),
                                                m_center_y(y_coord),
                                                m_radius(rad)
{
    cout << "Centered Ring have been created";
    cout << "It`s radius is " << rad << "\n";
}

Ring::~Ring()
{
}
////////////////////////////////////////////////////////

int main()
{

}
